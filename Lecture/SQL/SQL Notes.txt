

Database: Database is collection of data in a format that can be easily accessed(Digital)
A software application is used to manage our DataBase is called DBMS.

Non-Relational (NoSQL) data not stored in tables. eg. mongo DB

What is SQL:Structured Query Language

SQL is a programming language used to intract with relational databases.

It is used to perform CRUD (Create, Read, Update, Delete) operations.

Earlier it was called SEQUEL (Structured English QUEry Language).
--------------------------------------------------------------------

Database Structure: It contains tables
	Creating our first database: Our first SQL query ->CRATE DATABASE db_name;
	Deleting our database -> DROP DATABASE db_name;
USE db_name: it means right now we are using this database

Creating our First Table: USE db_name;
			 CREATE TABLE table_name(col_name1 datatype constraint , col_name2 datatype constraint,col_name3 datatype constrain);
 eg. CREATE TABLE student (id INT PRIMARY KEY,name VARCHAR(50),age INT NOT NULL );
To add data in table : INSERT INTO student VALUES(1,"AMAN",26);

Data types : CHAR(0-255), VARCHAR(0-255), BLOB(0-65535, INT, TINYINT, BIGINT, BIT(1-64), FLOAT,BOOLEAN 

Signed & Unsigned: unsigned contains only positive value eg. TINYINT UNSIGNED(0-255) , TINYINT(-128-127)
--------------------------------
Types of SQL commonds: 
	DLL(Data Definition Language): create, alter, rename, truncate & drop
	DQL(Data Query Language): select
	DML(Data Manupulation Language): insert, delete, update
	DCL(Data Control Language): grant & revoke permissions to users
	TCL(Transaction Control Language): start transaction,commit ,rollback
--------------------------------------------------------------------------
Database related Queries 
CREATE DATABASE db_name -> this command will create a database with name db_name.
CREATE DATABASE IF NOT EXISTS db_name -> this command will also create database with name db_name only if it there is no database present with this name.

DROP DATABASE db_name -> this will delete the database with name db_name if not present then it will give error
DROP DATABASE IF EXISTS db_name -> this will also delete the databse only if it exists otherwise it will give warning .
we can use for SHOW DATABASES; and for SHOW COLUMNS;
----------------------------------------------------
TABLE releted Queries:
	CREATE TABLE table_name(
	col_name1 datatype constraint,
	col_name2 datatype constraint);
eg. CREATE TABLE student (rollno INT PRIMARY KEY, name VARCHAR(50);

Select & View  ALL Columns: SELECT * FROM table_name;
		eg. SELECT * FROM student;

 Inserting data in table: INSERT INTO table_name (col_name1 , col_name2) VALUES (col1_v1, col2_v1),(col1_v2,col2_v2);
	eg.INSERT INTO student(rollno, name) VALUES (101,"karan"),(102,"Krishna");
-----------------------------------------------------
Primary key : It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id)
		There will be only Primary key and it should be NOT NULL
Foreign Key : A foreign key is a column (or set of columns) in a table that refers to the primary key of another table
		There can be multiple Foreign keys and can have multiple and duplicate values.
-----------------------------------------------------
1:01:00
Constraints: 






1:22:00

Operators 

Between (Selects for a given range)
	SELECT * FROM student WHERE marks BETWEEN 80 AND 90;

In (match any vanlue in the list)
	SELECT * FROM student WHERE city IN ("delhi","mumbai","pune");

NOT (to negate the given condition)
	SELECT * FROM student WHERE city NOT IN ("delhi","pune");

Limit Clause : Sets an upper limit on number of (tuples) rows to be returned.
	SELECT * FROM student LIMIT 3;
	eg. SELECT col1,col2 FROM table_name LIMIT number;

Order by Clause: To sort in ascending (ASC) or descending order(DESC)
	SELECT * FROM student OREDER BY city asc;
	eg.SELECT col1,col2 FROM table_name ORDER BY col_name ASC;

Aggregate Functions : Aggregate functions perform a calculation on a set of values, and return a single value.
	COUNT(), MAX(), MIN(), SUM(), AVG()
	eg.SELECT MAX(marks) FROM student;
	eg.SELECT AVG(marks) FROM student;

Group By Clause; Groups rows that have the same values into summary rows.
	It Collect data from multiple records and groups the result by one or more column.
	*Generally we use group by with some aggregation function.
	eg.count number of student in each city 
	    SELECT city, COUNT(name) FROM student GROUP BY city;

Having Clause:It is similar to WHERE i.e. applies some condition on rows .
	Used when we want to apply any condition after grouping.
	eg.count number of student in each city where max marks cross 90
	SELECT count(name), city FROM student GROUP BY city HAVING MAX(marks)>90;

General order to writing the clauses:
	SELECT columns
	FROM table_name
	WHERE condition
	GROUP BY column(s)
	HAVING condition
	ORDER BY column(s) ASC;
	
	example using all clause
	SELECT city FROM student WHERE grade="A" GROUP BY  city HAVING MAX(marks) ORDER BY city DESC;

--------------------------------------------------------
to turn off the safe mode we use SET SQL_SAFE_UPDATES=0;

Table related Queries: 

UPDATE (to update existing rows)
	UPDATE table_name SET col1=var1,col2=var2 WHERE condition;
	eg.UPDATE student SET grade="O" WHERE grade="A";
	eg. to update the marks of student with roll no.105 we use UPDATE student SET marks=82 WHERE rollno=105 ;
	eg. to update the grade of students UPDATE student SET grade="B" WHERE marks BETWEEN 80 AND 90;
	eg. to give +1 marks to every studen : UPDATE student SET marks=marks+1;

DELETE (to delete existing row )
	DELETE FROM table_name WHERE condition ;
	eg. DELETE FROM student WHRER marks<33;

Truncate (to delete tables data)
	TRUNCATE TABLE table_name;
	

ALTER(to change the schema)
	ADD COLUMN : 
	eg.ALTER TABLE table_name ADD COLUMN column_name datatype constraint;
	eg. ALTER TABLE studend ADD COLUMN age INT NOT NULL DEFAULT 19;

	DROP COLUMN: 
	eg. ALTER TABLE table_name DROP COLUMN column_name;
	eg.ALTER TABLE student DROP COLUMN student_age;

	RENAME COLUMN
	eg.ALTER TABLE table_name RENAME TO new_table_name;
	eg.ALTER TABLE student RENAME TO stu;
	
	CHANGE COLUMN (rename)
	eg.ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint;
	eg.ALTER TABLE student CHANGE age student_age INT;

	MODIFY COLUMN (modify datatype/constraint)
	eg.ALTER TABLE table_name MODIFY col_name new_datatype new_constraint;
	eg.ALTER TABLE student MODIFY age VARCHAR(2);

---------------------------------------------------
FOREIGN key: 


Cascading for Foreign key:
On Upate Cascade : When we create a foreign key using this option , it delete the referencing rows in the child table
	when the referenced row is deleted in the parent table which has a primary key.

On Delete Cascade: When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the 
	referenced row is updated in the parent table which has a primary key.
	
	eg.CREATE TABLE student (id INT PRIMARY KEY, course_id INT,
	   FOREIGN KEY (couser_id) REFERENCES course(id)
		ON DELETE CASCADE 
		ON UPDATE CASCADE );
--------------------------------------------------------------------------------
Joins in SQL: Join is used to combine rows from two or more tables,based on related column between them.

Types of joins : (inner join), Outer join(Left join, right join, full join)
	let we have two table A and B	

INNER JOIN : Returns record that have matching values in both tables. i.e. (A U B) 
	syntax: SELECT column(s) FROM tableA INNER JOIN tableB ON tableA.col_name=table_B.col_name;

LEFT JOIN : Returns all the records from the left table, and the matched records from the right table. i.e [A-B+(A U B)].
	syntax: SELECT column(s) FROM tableA LEFT JOIN tableB ON tableA.col_name=tableB.col_name;

RIGHT JOIN : Returns all records from the right table, and the matched records from the left table. i.e. [B-A+(A U B)]
	syntax: SELECT column(s) FROM tableA RIGHT JOIN tableB ON tableA.col_name=tableB.col_name;

FULL JOIN : Returns all records when there is  a match in either left or right table. i.e. (A+B).
	In mySQL there is no full join commond so we will combine Left join and right join  and use UNION in between the commond
	syntax : SELECT * FROM student LEFT JOIN course ON student.id=course.id
				UNION SELECT * FROM student RIGHT JOIN course ON student.id=course.id

Left exclusive join : Returns all records from Table A only and remove (A U B)
	comond: SELECT * FROM student AS a LEFT JOIN course AS b ON a.id=b.id WHERE b.id IS NULL

Right exclusive join : Returns all records from Table B only and remove (A u B).
	commond : SELECT FROM student AS a RIGHT JOIN course AS b ON a.id=b.id WHERE a.id IS NULL


SELF JOIN : It is a regular join but the table is joined with itself.
	syntax: SELECT column(s) FROM table AS a JOIN table AS B ON a.col_name=b.col_name
	eg. SELECT a.name AS manager_name,b.name FROM employee as a JOIN employee as b ON a.id=b.manager_id;

UNION : It is used to combine the result-set of two or more SELECT statements. It give UNIQUE records.
	To use it :
	-> every SELECT should have same number of columns
	-> columns must have similar datat ypes
	-> columns in every SELECT should be in same order
	Syntax: SELECT coluns(s) FROM tableA UNION SELECT column(s) FROM tableB
--------------------------------------------------------------------------------

SQL Sub Queries : A sub query or Inner query or Nested query is a query within another SQL query.
		It involves 2 select statements.
	syntax: SELECT column(s) FROM table_name WHERE col_name operator (subquery);
Que.Let there is student data with marks we have to get the data of the students who scores more than the class average.
Sol. SELECT name,marks FROM student WHERE marks >(SELECT AVG(marks) FROM student); -> this sql query is dynamic

SQL Sub Queris using FROM : eg.find the maximum marks from the students of delhi.
	sol. SELECT MAX(marks) FROM (SELECT * FROM student WHERE city ="delhi") AS temp;

SQL Sub Queris using SELECT : SELECT (SELECT MAX(marks) FROM student), names FROM students;
------------------------------------------------------------------------------------------------
MySQL Views: A view is a virtual table based on the result-set 	of an SQL statement.
	A view always shows up-to-date data. The database engine recreates the view , everytime a user queries it.
	commond : CREATE VIEW view1 AS SELECT rollno, name FROM student;
			SELECT * FROM view1;











 







